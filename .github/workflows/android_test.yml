
name: CI


on:

  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]


  workflow_dispatch:

# ensures one run at a time, and cancel older runs in the queue if new commits r pushed
concurrency:
  group: blankWorkflow-${{ github.ref }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

#instrumentation-test is the name of the job
  instrumentation-test:
    #    needs: [unit-test]
    runs-on: ubuntu-latest
    timeout-minutes: 75


#  matrix is used to define a set of combinations of values (like API level, architecture, device, OS version, etc.)
#  so the same job runs multiple timesâ€”once for each combination. So basically loops through all combination
    strategy:
      fail-fast: false
      matrix:
        api-level: [ 30 ]
        arch: [ x86_64 ]
        target: [ google_apis ]
        first-boot-delay: [ 600 ]
        iteration: [ 0 ]

    steps:


#frees up space un ubuntu removes unwanted stuff
      - name: Free Disk Space (Ubuntu)
        uses: insightsengineering/disk-space-reclaimer@v1
        with:
         tools-cache: false
         android: false
         dotnet: true
         haskell: false
         large-packages: false
         swap-storage: false
         docker-images: false


      - name: Checkout the code
        uses: actions/checkout@v4

# enables hardware acceleration - resulting in significant reduced time in in emulator boot up : only in ubuntu os
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Give gradlew execute permission
        run: chmod +x ./gradlew

      - name: Setup Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

#adding a specific jdk version in runner for predictblity & certainty inside runner
      - name: Configure JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"


      #  This step caches the Android Virtual Device (AVD) and ADB-related files to significantly reduce emulator startup time
      #  in GitHub Actions CI workflows.
      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.arch }}-${{matrix.target}}-v1-${{ github.event.inputs.clearCaches }}
          restore-keys: |
            avd-${{ matrix.api-level }}-${{ matrix.arch }}-${{matrix.target}}-v1
            

#  Boots the emulator once, warms it up (e.g., first-time setup, Dalvik cache population), then takes a snapshot of that
#  running emulator state. This snapshot makes future emulator startups much faster

      - name: AVD Boot and Snapshot Creation
        if: "${{ github.event.inputs.clearCaches != '' || (steps.avd-cache.outputs.cache-hit != 'true' && github.ref == 'refs/heads/master') }}"
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          sdcard-path-or-size: 100M
          disable-animations: true
          # Give the emulator a little time to run and do first boot stuff before taking snapshot
          script: |
            touch adb-log.txt
            $ANDROID_HOME/platform-tools/adb logcat '*:D' >> adb-log.txt &
            adb logcat --clear
            echo "Generated AVD snapshot for caching."


#  makes the emulator to boot up faster

#      - name: Emulator Snapshot After Firstboot Warmup
#
#        if: "${{ github.event.inputs.clearCaches != '' || (steps.avd-cache.outputs.cache-hit != 'true' && github.ref == 'refs/heads/master') }}"
#        env:
#          FIRST_BOOT_DELAY: ${{ matrix.first-boot-delay }}
#        uses: reactivecircus/android-emulator-runner@v2
#        with:
#          api-level: ${{ matrix.api-level }}
#          force-avd-creation: false
#          target: ${{ matrix.target }}
#          arch: ${{ matrix.arch }}
#          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
#          sdcard-path-or-size: 100M
#          disable-animations: true
#          script: |
#            touch adb-log.txt
#            $ANDROID_HOME/platform-tools/adb logcat '*:D' >> adb-log.txt &
#            $ANDROID_HOME/platform-tools/adb shell su root "setprop ctl.restart zygote"
#            sleep 10
#            sleep $FIRST_BOOT_DELAY
#            adb logcat --clear
#            echo "First boot warmup completed."


      - name: Run android Tests
        uses: reactivecircus/android-emulator-runner@v2
        timeout-minutes: 30
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          sdcard-path-or-size: 100M
          disable-animations: true
          script: ./gradlew connectedCheck --stacktrace --info



      - name: Upload instrumentation test report
        uses: actions/upload-artifact@v4
        with:
          name: instrumentation_test_report
          path: app/build/reports/androidTests/connected/debug/


